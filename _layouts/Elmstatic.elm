module Elmstatic exposing
    ( Content
    , Format(..)
    , Layout
    , Page
    , Post
    , PostList
    , decodeContent
    , decodePage
    , decodePost
    , decodePostList
    , htmlTemplate
    , inlineScript
    , layout
    , script
    , stylesheet
    )

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Json.Decode as Decode



{--

    The default HTML template generated by this module looks like this:
        <!doctype html>
        <html>
        <head>
            <title>${title}</title>
            <meta charset="utf-8">
            <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.1/highlight.min.js"></script>
            <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.1/languages/elm.min.js"></script>
            <script>hljs.initHighlightingOnLoad();</script>
            <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.1/styles/default.min.css">
            <link href="//fonts.googleapis.com/css?family=Open+Sans|Proza+Libre|Inconsolata" rel="stylesheet" type="text/css">
        </head>
        <body>
        <!-- Content goes here -->
        </body>
        </html>

-}


{-| Format tells which markdown type is used
-}
type Format
    = Markdown
    | ElmMarkup


{-|

    `Post.content` is the actual raw markdown from a file,
    besides the other fields which should be the 'frontmatter'

-}
type alias Post =
    { content : String
    , date : String
    , format : Format
    , link : String
    , section : String
    , siteTitle : String
    , tags : List String
    , title : String
    }


type alias Page =
    { content : String
    , format : Format
    , siteTitle : String
    , title : String
    }


type alias PostList =
    { posts : List Post
    , section : String
    , siteTitle : String
    , title : String
    }


type alias Content a =
    { a | siteTitle : String, title : String }


type alias Layout =
    Program Decode.Value Decode.Value Never


{-| For backward compatibility, look for the content either in `markdown` or `content` fields
-}
decodeContent : Decode.Decoder String
decodeContent =
    Decode.oneOf [ Decode.field "markdown" Decode.string, Decode.field "content" Decode.string ]


decodeFormat : Decode.Decoder Format
decodeFormat =
    Decode.oneOf
        [ Decode.map
            (\format ->
                if format == "emu" then
                    ElmMarkup

                else
                    Markdown
            )
          <|
            Decode.field "format" Decode.string
        , Decode.succeed Markdown
        ]


decodePage : Decode.Decoder Page
decodePage =
    Decode.map4 Page
        decodeContent
        decodeFormat
        (Decode.field "siteTitle" Decode.string)
        (Decode.field "title" Decode.string)


decodePost : Decode.Decoder Post
decodePost =
    Decode.map8 Post
        decodeContent
        (Decode.field "date" Decode.string)
        decodeFormat
        (Decode.field "link" Decode.string)
        (Decode.field "section" Decode.string)
        (Decode.field "siteTitle" Decode.string)
        (Decode.field "tags" <| Decode.list Decode.string)
        (Decode.field "title" Decode.string)


decodePostList : Decode.Decoder PostList
decodePostList =
    Decode.map4 PostList
        (Decode.field "posts" <| Decode.list decodePost)
        (Decode.field "section" Decode.string)
        (Decode.field "siteTitle" Decode.string)
        (Decode.field "title" Decode.string)


script : String -> Html Never
script src =
    node "citatsmle-script" [ attribute "src" src ] []


inlineScript : String -> Html Never
inlineScript js =
    node "citatsmle-script" [] [ text js ]


stylesheet : String -> Html Never
stylesheet href =
    node "link" [ attribute "href" href, attribute "rel" "stylesheet", attribute "type" "text/css" ] []


htmlTemplate : String -> List (Html Never) -> Html Never
htmlTemplate title contentNodes =
    node "html"
        []
        [ node "head"
            []
            [ node "title" [] [ text title ]
            , node "meta" [ attribute "charset" "utf-8" ] []
            , script "//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.1/highlight.min.js"
            , script "//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.1/languages/elm.min.js"
            , inlineScript "hljs.initHighlightingOnLoad();"
            , stylesheet "//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.1/styles/default.min.css"
            , stylesheet "//fonts.googleapis.com/css?family=Open+Sans|Proza+Libre|Inconsolata"
            ]
        , node "body" [] contentNodes
        ]


layout : Decode.Decoder (Content content) -> (Content content -> Result String (List (Html Never))) -> Layout
layout decoder view =
    Browser.document
        { init = \contentJson -> ( contentJson, Cmd.none )
        , view =
            \contentJson ->
                case Decode.decodeValue decoder contentJson of
                    Err error ->
                        { title = "error"
                        , body = [ Html.div [ attribute "error" <| Decode.errorToString error ] [] ]
                        }

                    Ok content ->
                        case view content of
                            Err viewError ->
                                { title = "error"
                                , body = [ Html.div [ attribute "error" viewError ] [] ]
                                }

                            Ok viewHtml ->
                                { title = ""
                                , body = [ htmlTemplate content.siteTitle <| viewHtml ]
                                }
        , update = \msg contentJson -> ( contentJson, Cmd.none )
        , subscriptions = \_ -> Sub.none
        }
